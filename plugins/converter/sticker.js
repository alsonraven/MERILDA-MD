import { writeExif } from "../../lib/exif.js"
import fs from "fs"

const handler = async (m, { conn, args, text, command, prefix, quoted, mime, reply }) => {
  // Plugin Sticker am√©lior√© - Convertit images/vid√©os en stickers
  
  try {
    // V√©rifications initiales
    if (!quoted) {
      return reply(`*üìé R√©pondez √† une image ou vid√©o avec la commande* \`${prefix + command}\`\n\n*Exemple:*\n\`${prefix + command} Mon Pack|Mon Auteur\``)
    }
    
    if (!mime || !/image|video/.test(mime)) {
      return reply(`*‚ùå Type de fichier non support√© !*\n\n*Support√©s:* Image (jpg, png, webp) ou Vid√©o (mp4, gif)\n*Commande:* \`${prefix + command}\``)
    }
    
    // V√©rifications sp√©cifiques pour les vid√©os
    if (/video/.test(mime)) {
      const duration = (quoted.msg || quoted).seconds || 0
      const filesize = (quoted.msg || quoted).fileLength || 0
      
      if (duration > 10) {
        return reply("*‚è±Ô∏è Dur√©e maximum: 10 secondes !*\n\n*Astuce:* Utilisez des GIFs courts ou d√©coupez votre vid√©o.")
      }
      
      if (filesize > 5 * 1024 * 1024) { // 5MB
        return reply("*üì¶ Taille maximum: 5MB !*\n\n*Astuce:* Compressez votre vid√©o avant conversion.")
      }
    }
    
    // Message de traitement avec emoji anim√©
    const processingMsg = await reply("*üîÑ Traitement en cours...*\n\n‚è≥ *Conversion de votre m√©dia en sticker*")
    
    // T√©l√©chargement du m√©dia
    let media
    try {
      media = await quoted.download()
      if (!media || media.length === 0) {
        throw new Error("√âchec du t√©l√©chargement du m√©dia")
      }
    } catch (downloadError) {
      console.error("Erreur de t√©l√©chargement:", downloadError)
      return reply("*‚ùå Impossible de t√©l√©charger le m√©dia*\n\n*Causes possibles:*\n‚Ä¢ Fichier corrompu\n‚Ä¢ Connexion instable\n‚Ä¢ M√©dia trop volumineux")
    }
    
    // Parse des m√©tadonn√©es (packname et author)
    let packname = ""
    let author = ""
    
    if (args.length > 0) {
      const input = args.join(' ')
      if (input.includes('|')) {
        [packname, ...author] = input.split('|')
        author = author.join('|').trim()
        packname = packname.trim()
      } else {
        packname = input.trim()
      }
    }
    
    // Valeurs par d√©faut avec fallbacks
    const finalPackname = packname || global.packname || "MERILDA-MD"
    const finalAuthor = author || global.author || "hhhisoka"
    
    // Validation des m√©tadonn√©es
    if (finalPackname.length > 30) {
      return reply("*üìù Nom du pack trop long !*\n\n*Maximum:* 30 caract√®res\n*Actuel:* " + finalPackname.length)
    }
    
    if (finalAuthor.length > 30) {
      return reply("*üë§ Nom de l'auteur trop long !*\n\n*Maximum:* 30 caract√®res\n*Actuel:* " + finalAuthor.length)
    }
    
    // Cr√©ation du sticker avec gestion d'erreur
    let stickerPath
    try {
      stickerPath = await writeExif(media, {
        packname: finalPackname,
        author: finalAuthor,
      })
      
      if (!stickerPath) {
        throw new Error("√âchec de la cr√©ation du sticker")
      }
    } catch (exifError) {
      console.error("Erreur writeExif:", exifError)
      return reply("*‚ùå Erreur lors de la cr√©ation du sticker*\n\n*D√©tails:* " + exifError.message + "\n\n*Conseil:* V√©rifiez que votre image/vid√©o n'est pas corrompue")
    }
    
    // Envoi du sticker
    try {
      await conn.sendMessage(m.chat, {
        sticker: { url: stickerPath }
      }, { quoted: m })
      
      // Message de succ√®s avec informations
      const successMsg = `*‚úÖ Sticker cr√©√© avec succ√®s !*\n\n` +
        `üì¶ *Pack:* ${finalPackname}\n` +
        `üë§ *Auteur:* ${finalAuthor}\n` +
        `üé¨ *Type:* ${/video/.test(mime) ? 'Anim√©' : 'Statique'}`
      
      await reply(successMsg)
      
    } catch (sendError) {
      console.error("Erreur d'envoi:", sendError)
      return reply("*‚ùå Impossible d'envoyer le sticker*\n\n*Causes possibles:*\n‚Ä¢ Probl√®me de connexion\n‚Ä¢ Sticker trop volumineux\n‚Ä¢ Erreur serveur")
    }
    
    // Nettoyage des fichiers temporaires
    try {
      if (stickerPath && fs.existsSync(stickerPath)) {
        fs.unlinkSync(stickerPath)
      }
    } catch (cleanupError) {
      console.warn("Avertissement nettoyage:", cleanupError.message)
      // Ne pas interrompre le processus pour une erreur de nettoyage
    }
    
  } catch (error) {
    console.error(`Erreur critique sticker: ${error}`)
    
    // Messages d'erreur sp√©cifiques
    let errorMsg = "*‚ùå Erreur inattendue lors de la cr√©ation du sticker*"
    
    if (error.message.includes('ENOENT')) {
      errorMsg = "*‚ùå Fichier temporaire manquant*"
    } else if (error.message.includes('permission')) {
      errorMsg = "*‚ùå Probl√®me de permissions syst√®me*"
    } else if (error.message.includes('memory')) {
      errorMsg = "*‚ùå M√©moire insuffisante*"
    }
    
    await reply(`${errorMsg}\n\n*D√©tails techniques:* ${error.message}\n\n*üí° Conseil:* R√©essayez avec un fichier plus petit`)
  }
}

handler.help = ["sticker", "s"]
handler.tags = ["converter"]
handler.command = /^s(tic?ker)?(gif)?(wm)?$/i
handler.limit = 3 // Limite d'utilisation pour √©viter le spam

export default handler