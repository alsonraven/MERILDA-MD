const handler = async (m, { conn, args, text }) => {
  try {
    const db = (await import('../../lib/database/database.js')).default;

    // Initialize settings if not exists
    if (!db.data.settings[conn.user.jid]) {
      db.data.settings[conn.user.jid] = {
        autoReadStatus: false,
        autoReadBroadcast: false,
        broadcastReply: false,
        broadcastReplyMessage: 'Message automatique du bot',
        fakeTyping: false,
        fakeRecording: false
      };
    }

    const setting = db.data.settings[conn.user.jid];

    if (args[0] === 'on' || args[0] === 'enable') {
      setting.broadcastReply = true;
      db.saveData('settings');
      await m.reply('‚úÖ *R√©ponse automatique aux diffusions activ√©e*\nLe bot r√©pondra automatiquement aux messages de diffusion.');
    } else if (args[0] === 'off' || args[0] === 'disable') {
      setting.broadcastReply = false;
      db.saveData('settings');
      await m.reply('‚ùå *R√©ponse automatique d√©sactiv√©e*\nLe bot ne r√©pondra plus aux diffusions.');
    } else if (args[0] === 'set' && args[1]) {
      const newMessage = args.slice(1).join(' ');
      setting.broadcastReplyMessage = newMessage;
      db.saveData('settings');
      await m.reply(`‚úÖ *Message de r√©ponse mis √† jour:*\n"${newMessage}"`);
    } else {
      const status = setting.broadcastReply ? 'Activ√©' : 'D√©sactiv√©';
      const message = setting.broadcastReplyMessage;
      await m.reply(`*R√âPONSE AUTOMATIQUE AUX DIFFUSIONS*\n\nüìä √âtat: ${status}\nüí¨ Message: "${message}"\n\n*Commandes:*\n‚Ä¢ ${global.prefix.main}bcreply on - Activer\n‚Ä¢ ${global.prefix.main}bcreply off - D√©sactiver\n‚Ä¢ ${global.prefix.main}bcreply set <message> - D√©finir le message`);
    }
  } catch (error) {
    console.error('Erreur broadcast reply:', error);
    await m.reply('‚ùå Erreur lors de la gestion de la r√©ponse automatique.');
  }
};

handler.help = ['broadcastreply'];
handler.tags = ['owner'];
handler.command = ['broadcastreply', 'bcreply', 'autoreply'];
handler.owner = true;

export default handler;